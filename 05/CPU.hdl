// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //判断是否是c还是a指令 根据in[15] in[5] 决定是否areg存放数据

    //判断是否为c 指令 是否储存到a
    And(a=instruction[5], b=instruction[15], out=outca);
    Mux16(a=instruction, b=outalu, sel=outca, out=outmux1);

    //00 存放
    //01 存放
    //11 存放
    //10 不存放
    Not(in=instruction[15], out=not15);
    Or(a=not15, b=instruction[5], out=Or2);
    
    ARegister(in=outmux1, load=Or2, out=outaregister, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[3], out=writeM);
    //判断是否为c 指令 m是否进入
    And(a=instruction[12], b=instruction[15], out=outcm);
    Mux16(a=outaregister, b=inM, sel=outcm, out=outmux2);

    //判断是否为c 指令 是否储存到d
    And(a=instruction[4], b=instruction[15], out=outcd);
    DRegister(in=outalu, load=outcd, out=outdregister);

    //判断是否为c 指令
    And(a=instruction[11], b=instruction[15], out=outzx);
    And(a=instruction[10], b=instruction[15], out=outnx);
    And(a=instruction[9], b=instruction[15], out=outzy);
    And(a=instruction[8], b=instruction[15], out=outny);
    And(a=instruction[7], b=instruction[15], out=outf);
    And(a=instruction[6], b=instruction[15], out=outno);

    //进入alu计算
    ALU(x=outdregister, y=outmux2, zx=outzx, nx=outnx, zy=outzy, ny=outny, f=outf, no=outno, out=outalu, out=outM, zr=outzr, ng=outng);
    
    //判断是否为c 指令
    And(a=instruction[0], b=instruction[15], out=outcb);
    And(a=instruction[1], b=instruction[15], out=outc0);
    And(a=instruction[2], b=instruction[15], out=outcs);

    //判断是否jump 基本原则分为三组 >0 <0 =0 三种情况满足一种情况则jump 如果不则一直+1
    //三种情况
    Or(a=outng, b=outzr, out=outor);
    Not(in=outor, out=outb0);
    And(a=outcb, b=outb0, out=outb);
    And(a=outc0, b=outzr, out=out0);
    And(a=outcs, b=outng, out=outs);

    //满足一种情况
    Or(a=outb, b=out0, out=out1);
    Or(a=out1, b=outs, out=out2);
    PC(in=outaregister, load=out2, inc=true, reset=reset, out[0..14]=pc);
}